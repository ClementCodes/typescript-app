{"ast":null,"code":"var _jsxFileName = \"/Users/ordideclement/Documents/proj-/en cours../typescript-app/src/components/pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n\nconst PokemonForm = ({\n  pokemon\n}) => {\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const history = useHistory();\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy']; //methode hastypes  :  cette methode renvoit un simple boolean permettant de savoir si le teype passe appartient ou non au pokemon \n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  }; //le role de la methode handleInputChange est a chaque fois qu  il ya ura un changmenet au cours de l evenement au niveau du nom\n  //  et du point de vie du pokemon  ensuite on regroupe le smodifications du champ dans un nouvel obje\n  //newField ensuite on modifiere la etat d enotre firmulaire grace a setForm fournit par le hook  d etat (avec le spread operator qui va fsuionnner deux objets)\n\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      //si l utilisateur coche un type ,a l ajoute a la liste des types de pokémon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      history.push(`/pokemons/${pokemon.id}`);\n    } //on redirige l utilsateur vers la pages d etatils d un utilsateur grace au hooks history\n\n  };\n\n  const validateForm = () => {\n    let newForm = form; //Validator name\n\n    if (!/^[a-zA-Zàéè]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'le nom du pokemon est requis(1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } //Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'les points de vie du pokemon sont compris entre 0-999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypeValid = type => {\n    if (form.types.value.length === 1 && !hasType(type)) {\n      return false;\n    }\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col s12 m8 offset-m2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card hoverable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: pokemon.picture,\n    alt: pokemon.name,\n    style: {\n      width: '250px',\n      margin: '0 auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-stacked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }, \"Nom\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.name.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, \"Point de vie\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"hp\",\n    name: \"hp\",\n    type: \"number\",\n    className: \"form-control\",\n    value: form.hp.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }, \"D\\xE9g\\xE2ts\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cp\",\n    name: \"cp\",\n    type: \"number\",\n    className: \"form-control\",\n    value: form.cp.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"TYPE\"), types.map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: type,\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: type,\n    type: \"checkbox\",\n    className: \"filled-in\",\n    value: type,\n    disabled: !isTypeValid(type),\n    checked: hasType(type),\n    onChange: e => selectType(type, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: formatType(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 27\n    }\n  }, type))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-action center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, \"Valider\")))))));\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["/Users/ordideclement/Documents/proj-/en cours../typescript-app/src/components/pokemon-form.tsx"],"names":["React","useState","formatType","useHistory","PokemonForm","pokemon","form","setForm","name","value","isValid","hp","cp","types","history","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","handleSubmit","preventDefault","isFormValid","validateForm","push","id","newForm","test","errorMsg","error","isTypeValid","length","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n\n\n\ntype Props = {\n  pokemon: Pokemon\n};\n  \n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?:boolean\n}\n\ntype Form = {\n\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types:Field\n}\n\n\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon }) => {\n  \n  \n\n\n  \n  const [form, setForm] = useState<Form>({\n  \n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true },\n  });\n\n\n  const history = useHistory();\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n   \n//methode hastypes  :  cette methode renvoit un simple boolean permettant de savoir si le teype passe appartient ou non au pokemon \n  const hasType = (type: string): boolean => {\n  \n    return form.types.value.includes(type)\n  }\n  \n  //le role de la methode handleInputChange est a chaque fois qu  il ya ura un changmenet au cours de l evenement au niveau du nom\n  //  et du point de vie du pokemon  ensuite on regroupe le smodifications du champ dans un nouvel obje\n  //newField ensuite on modifiere la etat d enotre firmulaire grace a setForm fournit par le hook  d etat (avec le spread operator qui va fsuionnner deux objets)\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName ]: { value: fieldValue } };\n    \n    setForm({ ...form, ...newField });\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n  \n    const checked = e.target.checked;\n    let newField: Field;\n\n    if (checked) {\n      \n      //si l utilisateur coche un type ,a l ajoute a la liste des types de pokémon.\n\n      const newTypes: string[] = form.types.value.concat([type]);\n      newField = { value: newTypes };\n    } else {\n      \n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n\n    }\n\n    setForm({ ...form, ...{ types: newField } });\n  }\n\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => { \n    \n    e.preventDefault();\n    const isFormValid = validateForm();\n    if (isFormValid) {\n      history.push(`/pokemons/${pokemon.id}`)\n    }\n    \n    //on redirige l utilsateur vers la pages d etatils d un utilsateur grace au hooks history\n  }\n  \n  const validateForm = () => {\n    \n    let newForm: Form = form;\n\n    //Validator name\n    if (!/^[a-zA-Zàéè]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'le nom du pokemon est requis(1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n      \n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm ={...newForm,...{name:newField}}\n    }\n\n\n        //Validator hp\n        if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg: string = 'les points de vie du pokemon sont compris entre 0-999.';\n          const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ hp: newField } };\n          \n        } else {\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\n          newForm ={...newForm,...{hp:newField}}\n        }\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n\n  }\n\n\n  const isTypeValid = (type: string): boolean => {\n  \n    if (form.types.value.length === 1 && !hasType(type)) {\n      return (false);\n    }\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return (false);\n    \n\n    }\n    return true;\n  }\n\n  return (\n    <form onSubmit={e=>handleSubmit(e)} > \n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e =>handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e =>handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\"  name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e =>handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>TYPE</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypeValid(type)} checked={hasType(type)} onChange={e =>selectType(type,e)}  ></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}